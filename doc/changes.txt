2010-08-26  Update and Corrections

	1. Content-Disposition will be set with filename if available.

    2. Update to bat shell program.
    
    3. Added two new parameters connecttimeout and readtimeout to the 
     two processors: AS2SenderModule and AsynchMDNSenderModule which 
     are defined in the config.xml file. These parameters define 
     timeout values in milliseconds for each respective function.  
     The parameters are optional and the default value for each is 
     30000.       

2009-10-18  Corrections

	1. Fix in AS2SenderModule.java. For some AS2 servers send MIC and 
	algorithm separated by comma only (no space).
	
	2. Fix in AsynchMDNSenderModule .  When verifying the command in 
	the canHandle method code should be using constant DO_SENDMDN.
	

2009-09-10  Update  -  Common Logging.

Added the Apache Group commons logging library to allow the
use of other logging packages like log4j and Sun's Java logging
implentation, along with the OpenAS2 logging.  

Side effects -
	1. These changes required replacing all log requests to use the 
	Common Logging log call. This includes changing the Level of the 
	log and Level description.
	
    2. If you continue to use the OpenAS2 logging package you must 
    include  -Dorg.apache.commons.logging.Log=org.openas2.logging.Log 
    in your startup call or as a property in the commons-logging.properties 
    file.  See http://commons.apache.org/logging/guide.html#commons-logging-api.jar
    for more information.

    3.  If you use any other logging package you MUST remove the 
    loggers node and its logger subnodes from the config.xml file.


2009-05-07 - Update and Corrections

Both Sender classes now accpet all 200 HTTP response codes from 
receiver.

2009-04-28 - Update and Corrections

Placed the unstable code into the stable code.  We all have been using this code
for sometime now so it must be stable.

Corrected the start-openas2 scripts in the sample-setup.

Note - you may want to try the new BC mail and provider classes available at BouncyCastle.org.
As of today BC is version 143.

Added a new attribute to the parntership node to allow specifying Content-Transfer-Encoding.


Corrected the following bugs
 2716888  	remove folding from HTTP headers
 2660947 	OpenAS2 uses incorrect RFC2822 date format
 2615775 	OpenAS2 allows malicious sender to overwrite files
 2609279 	Poor parsing of mic's

Applied the following patches
 2727470  	Optional extraction of encoded message content with headers
 2723552 	$msg.content-disposition.filename$ has incorrect filename
 2715448 	Compatibility with nuBridges e-commerce AS2
 2662179 	Outbound Async MDN's are saved but not sync MDN's
 2656852 	Saved MDN format puts text first. Last would be better
 2616405 	CompositeParameters exposes itself
 2615919 	Get rid of some little used code
 2612760 	Cope with Transfer-Encoding: chunked
 2593257 	allow setting of Content-Type from attributes
 2593214  	Allow per-partneship definition of message-id  

2009-01-09 - Updates and Corrections

Fix problem w/ CYCLONE MDN responses.
  
2008-06-13 - Updates and Corrections

Corrected message header date reporting.  

AS2ReceiverHandler not appending new line character.

Organized some import statements.

2008-05-13 - Updates and Corrections

Added missing toXML method from CommandResult class.

Replaced use of StringTokenizer with CommandTokenizer.


2008-03-18 - Updates and Corrections

Added a logging statement so that incoming message ids can be 
associated with the stored file name.

Corrected stored file naming issue.  

    Allows the use of the content-disposition filename to be used in
    the stored filename specification in config.xml MessageFileModule
      example...
        filename="%home%\inbox\$msg.content-disposition.filename$"
      note new system variable $msg.content-disposition.filename$
      
	In 2007-03-31 release if content-disposition contained the filename
	this filename was used to create the stored filename ignoring the 
	filename specification in the config.xml file.   


2008-01-08 - OpenAS2 With A Web Front-End 

This release contain the final changes to set up a web-based front end 
to OpenAS2.  The underlying AS2 engine has not changed, only the 
commands and setup files.

A SocketLoggerClass has been added and an entry must be present
in the config.xml. The logger entry is a subnode of the loggers node.
The ipaddr/portid is the address where the OpenAS2Server sends logging 
information.  Note: If using the web front end the servlet listens 
here.  For more information see the OpenAS2 Remote package.
		<logger classname="org.openas2.logging.SocketLogger"
		    ipaddr="127.0.0.1"
			portid="999"/>	

As noted below, the SocketCommandProcessor entry in the config.xml file 
has changed.  Two new nodes are added (userid and password).  See 
example below:
	<commandProcessors>
	  <commandProcessor classname="org.openas2.cmd.processor.StreamCommandProcessor"/>
	  <commandProcessor classname="org.openas2.cmd.processor.SocketCommandProcessor"  portId="4321"
	    userid="userID" password="pWd"/>
	</commandProcessors>
These values are used to logon to the socket command processor from a
remote terminal or webpage.


2007-08-28 - Preparing OpenAS2 For Web Front-End 

This release contain changes to set up a web-based front end to OpenAS2.
The underlying AS2 engine has not changed, only the commands and setup 
files.

A new CommandProcessor has been added.  This command process, which 
accepts a command as a single line string like the StreamCommandProcessor,
gets its commands from a TCP/IP socket hence its name 
SocketCommandProcessor.

Also new commands have been created to allow command line edits to the 
partnership.xml file.  It is recommended that you continue to maintain 
the partnership.xml file with a standard editor.

The "part" command has been replaced by "partnership".

1.  Changes to config.xml.  The commandProcessor is now a subnode of a
new node named commandProcessors. OpenAS2 now supports multiple command 
processors.  Only one command processor is required, though the package 
does not check to see if no processors are defined.  You may comment 
out one of the commandProcessor nodes - most likely the 
SocketCommandProcessor.

	<commandProcessors>
	  <commandProcessor classname="org.openas2.cmd.processor.StreamCommandProcessor"/>
	  <commandProcessor classname="org.openas2.cmd.processor.SocketCommandProcessor"  portId="4321"
	    userid="useridhere" password="anotsocrypticpassword"/>
	</commandProcessors>

Also, commandProcessors have been changed to be running as a thread 
within the OpenAS2Server.


2.  Changes to commands.xml.  The commands affecting the partnership.xml 
file have been expanded to allow full editing - basically commands to  
list, view, add and delete.  Also there is a command to save the 
changes to the partnership.xml file.

	<multicommand name="partner"
		description="Partner commands">
		<command classname="org.openas2.app.partner.ListPartnersCommand"/>
		<command classname="org.openas2.app.partner.AddPartnerCommand"/>
		<command classname="org.openas2.app.partner.DeletePartnerCommand"/>
		<command classname="org.openas2.app.partner.ViewPartnerCommand"/>
	</multicommand>
	<multicommand name="partnership"
		description="Partnership commands">
		<command classname="org.openas2.app.partner.RefreshPartnershipsCommand"/>
		<command classname="org.openas2.app.partner.ListPartnershipsCommand"/>
		<command classname="org.openas2.app.partner.AddPartnershipCommand"/>
		<command classname="org.openas2.app.partner.DeletePartnershipCommand"/>
		<command classname="org.openas2.app.partner.StorePartnershipsCommand"/>
		<command classname="org.openas2.app.partner.ViewPartnershipCommand"/>
	</multicommand>
	
3.  A new "external" package org.openas2.remote has been added. 
Eventually the package will be the front-end to the web-based 
application.  Presently it contains a simple interface to pass commands 
to the SocketCommandProcessor. 	
 
    Refer to the source program CommandLine for more information.
    
4.  About the SocketCommandProcessor messages are sent as single lines 
via a predefined port.  The format of the messages are: 
	<command id="useridhere" password="anotsocrypticpassword">cert list</command>
	

5.  Several modules in the org.openas2.app package have been moved to a 
new package named org.openas2.cmd.

---

2007-06-01 - Added ability to include the filename in http headers

1.  Changes to config.xml, node: processor, subnode: module.
    
    1.a New attribute for AS2DirectoryPollingModules to specify if 
    the filename is to be included in the headers. Any value other than
    "true" will be considered false.
      	<module classname="org.openas2.processor.receiver.AS2DirectoryPollingModule"
			outboxdir="%home%\toAny"
			errordir="%home%\toAny\error"			
			interval="5"			
			delimiters="-."
			format="sender.as2_id, receiver.as2_id, attributes.fileid"			
			mimetype="application/EDI-X12"
			sendFileName="true"/>

    1.b Affected modules:
      org.openas2.processor.receiver.DirectoryPollingModule
      org.openas2.processor.storage.BaseStorageModule
      org.openas2.processor.storage.MessageFileModule
      
2.  Used the Eclipse UI to eliminate unused Java imports. Too many 
	affected modules to list.

3.  Structure of download package changed.  Removed samples-setup. 

---

2007-04-03 - Bug fix for Asynch MDN

1.  Put the OpenAS2 classes into jar file. OpenAS2-20070402.jar

2.  Placed jar file in sample-startup bin directory.

3.  Updated windows start-openas2.bat commands file

---

2007-04-02 - Bug fix for Asynch MDN 

1.  AS2MDNReceiverHandler - pendinginfo file not deleted. Bad path 
    string.

---

2007-03-31 - Updated for Asynch MDN

Note: The Asynchronous MDN sender and receiver do not work with SMTP 
protocol.

Several changes:

  1.  Changes to partnerships.xml file.
  
    1.a  New attribute in partnership node, to specify url to your 
    server receives asynchronous MDN responses.
    
      ex:     <attribute name="as2_receipt_option" value="http://xxxxxxx:10081"/>
      
  2.  Changes to config.xml file.
  
    2.a  New attributes to processor node, specifies file system 
    directories where your server stores pending asynchronous MDN 
    responses.  When your trading partner returns the asynch mdn the 
    server uses file stored in these directories to verify MDN 
    response.
    
    ex:	    pendingMDN="%home%/pendingMDN3"
    	    pendingMDNinfo="%home%/pendinginfoMDN3">
    	    
    2.b  New module node which hangs off of the processor node.  
    Specifies the class and port number that handles incoming 
    Asynchronous MDN responses.
    
    ex:	<module classname="org.openas2.processor.receiver.AS2MDNReceiverModule"			
          port="10081"/>
          
  3.  Source code changes.
  
     Too many to list.  But primarily new classes added to handle 
     outgoing and incoming Asynchronous MDNs.
 